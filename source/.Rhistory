dim(df_all)
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
pca.ds <- PCA(scaled.df_all,quanti.sup = c(26:ncol(scaled.df_all)),axes = c(1,2),ncp = 13)
fviz_pca_var(pca.ds,axes = c(1,2), alpha.var="contrib") + theme_minimal() #visualize with factoextra
fviz_screeplot(pca.ds,ncp=20) #scree plot with factoextra
plot(pca.ds$eig$eigenvalue, type="l") #scree plot normal
pca.ds <- PCA(scaled.df_all,quanti.sup = c(26:ncol(scaled.df_all)),axes = c(1,2),ncp = 13)
fviz_pca_var(pca.ds,axes = c(1,2), alpha.var="contrib") + theme_minimal() #visualize with factoextra
fviz_screeplot(pca.ds,ncp=20) #scree plot with factoextra
algsResponseCol <- c("df_J48$response","df_IBk$response","df_JRip$response","df_Logistic$response","df_NaiveBayes$response")
alg <- algsResponseCol[1]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
alg <- algsResponseCol[2]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
alg <- algsResponseCol[3]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
alg <- algsResponseCol[4]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
alg <- algsResponseCol[5]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
df_IBk <- df_IBk[which(df_IBk$Dataset %in% dsToBeUsed),]
df_JRip <- df_JRip[which(df_JRip$Dataset %in% dsToBeUsed),]
df_NaiveBayes <- df_NaiveBayes[which(df_NaiveBayes$Dataset %in% dsToBeUsed),]
df_Logistic <- df_Logistic[which(df_Logistic$Dataset %in% dsToBeUsed),]
df_all <- cbind(df_J48[,c(1:ncol(df_J48)-1)],df_J48$response,df_IBk$response,df_JRip$response,df_Logistic$response,df_NaiveBayes$response)
df_all <- df_all[,-grep("NoiseToSignalRatio",colnames(df_all))] #remove EQNA because is correlated (cor=1) with NtoSR
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
pca.ds <- PCA(scaled.df_all,quanti.sup = c(26:ncol(scaled.df_all)),axes = c(1,2),ncp = 13)
fviz_pca_var(pca.ds,axes = c(1,2), alpha.var="contrib") + theme_minimal() #visualize with factoextra
colnames(scaled.df_all)
pca.ds <- PCA(scaled.df_all,quanti.sup = c(27:ncol(scaled.df_all)),axes = c(1,2),ncp = 13)
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/precision"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/precision/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
df_IBk <- df_IBk[which(df_IBk$Dataset %in% dsToBeUsed),]
df_JRip <- df_JRip[which(df_JRip$Dataset %in% dsToBeUsed),]
df_NaiveBayes <- df_NaiveBayes[which(df_NaiveBayes$Dataset %in% dsToBeUsed),]
df_Logistic <- df_Logistic[which(df_Logistic$Dataset %in% dsToBeUsed),]
df_all <- cbind(df_J48[,c(1:ncol(df_J48)-1)],df_J48$response,df_IBk$response,df_JRip$response,df_Logistic$response,df_NaiveBayes$response)
df_all <- df_all[,-grep("NoiseToSignalRatio",colnames(df_all))] #remove EQNA because is correlated (cor=1) with NtoSR
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
pca.ds <- PCA(scaled.df_all,quanti.sup = c(27:ncol(scaled.df_all)),axes = c(1,2),ncp = 13)
fviz_pca_var(pca.ds,axes = c(1,2), alpha.var="contrib") + theme_minimal() #visualize with factoextra
fviz_screeplot(pca.ds,ncp=20) #scree plot with factoextra
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
df_IBk <- df_IBk[which(df_IBk$Dataset %in% dsToBeUsed),]
df_JRip <- df_JRip[which(df_JRip$Dataset %in% dsToBeUsed),]
df_NaiveBayes <- df_NaiveBayes[which(df_NaiveBayes$Dataset %in% dsToBeUsed),]
df_Logistic <- df_Logistic[which(df_Logistic$Dataset %in% dsToBeUsed),]
df_all <- cbind(df_J48[,c(1:ncol(df_J48)-1)],df_J48$response,df_IBk$response,df_JRip$response,df_Logistic$response,df_NaiveBayes$response)
df_all <- df_all[,-grep("NoiseToSignalRatio",colnames(df_all))] #remove EQNA because is correlated (cor=1) with NtoSR
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
pca.ds <- PCA(scaled.df_all,quanti.sup = c(27:ncol(scaled.df_all)),axes = c(1,2),ncp = 13)
fviz_pca_var(pca.ds,axes = c(1,2), alpha.var="contrib") + theme_minimal() #visualize with factoextra
fviz_screeplot(pca.ds,ncp=20) #scree plot with factoextra
length(dsToBeUsed)
write.csv(dsToBeUsed,file = "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/common.csv")
dsToBeUsed <- read.csv(paste(c(folder,"common.csv"),collapse=""),header = TRUE,sep=",",colClasses = c("numeric","character"))[,2]
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
dsToBeUsed <- read.csv(paste(c(folder,"common.csv"),collapse=""),header = TRUE,sep=",",colClasses = c("numeric","character"))[,2]
dsToBeUsed <- read.csv(paste(c(folder,"common.csv"),collapse=""),header = TRUE,sep=",",colClasses = c("character","character"))[,2]
class(dsToBeUsed)
length(dsToBeUsed)
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
df_IBk <- df_IBk[which(df_IBk$Dataset %in% dsToBeUsed),]
df_JRip <- df_JRip[which(df_JRip$Dataset %in% dsToBeUsed),]
df_NaiveBayes <- df_NaiveBayes[which(df_NaiveBayes$Dataset %in% dsToBeUsed),]
df_Logistic <- df_Logistic[which(df_Logistic$Dataset %in% dsToBeUsed),]
df_all <- cbind(df_J48[,c(1:ncol(df_J48)-1)],df_J48$response,df_IBk$response,df_JRip$response,df_Logistic$response,df_NaiveBayes$response)
df_all <- df_all[,-grep("NoiseToSignalRatio",colnames(df_all))] #remove EQNA because is correlated (cor=1) with NtoSR
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
pca.ds <- PCA(scaled.df_all,quanti.sup = c(27:ncol(scaled.df_all)),axes = c(1,2),ncp = 13)
fviz_pca_var(pca.ds,axes = c(1,2), alpha.var="contrib") + theme_minimal() #visualize with factoextra
fviz_screeplot(pca.ds,ncp=20) #scree plot with factoextra
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
dsToBeUsed <- read.csv(paste(c(folder,"common.csv"),collapse=""),header = TRUE,sep=",",colClasses = c("character","character"))[,2]
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/precision/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
df_IBk <- df_IBk[which(df_IBk$Dataset %in% dsToBeUsed),]
df_JRip <- df_JRip[which(df_JRip$Dataset %in% dsToBeUsed),]
df_NaiveBayes <- df_NaiveBayes[which(df_NaiveBayes$Dataset %in% dsToBeUsed),]
df_Logistic <- df_Logistic[which(df_Logistic$Dataset %in% dsToBeUsed),]
df_all <- cbind(df_J48[,c(1:ncol(df_J48)-1)],df_J48$response,df_IBk$response,df_JRip$response,df_Logistic$response,df_NaiveBayes$response)
df_all <- df_all[,-grep("NoiseToSignalRatio",colnames(df_all))] #remove EQNA because is correlated (cor=1) with NtoSR
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
pca.ds <- PCA(scaled.df_all,quanti.sup = c(27:ncol(scaled.df_all)),axes = c(1,2),ncp = 13)
fviz_pca_var(pca.ds,axes = c(1,2), alpha.var="contrib") + theme_minimal() #visualize with factoextra
fviz_screeplot(pca.ds,ncp=20) #scree plot with factoextra
dsToBeUsed[1,]
dsToBeUsed[1]
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
df_J48_PA <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_J48_PA <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
dsCommon <- intersect(intersect(intersect(intersect(intersect(df_J48$Dataset,df_IBk$Dataset),df_JRip$Dataset),df_JRip$Dataset),df_Logistic$Dataset),df_NaiveBayes$Dataset)
length(dsCommon)
dsCommonPA <- dsCommon
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/precision"
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/precision/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
dsCommon <- intersect(intersect(intersect(intersect(intersect(df_J48$Dataset,df_IBk$Dataset),df_JRip$Dataset),df_JRip$Dataset),df_Logistic$Dataset),df_NaiveBayes$Dataset)
length(dsCommon)
dsCommonPR <- dsCommon
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/roc/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
dsCommon <- intersect(intersect(intersect(intersect(intersect(df_J48$Dataset,df_IBk$Dataset),df_JRip$Dataset),df_JRip$Dataset),df_Logistic$Dataset),df_NaiveBayes$Dataset)
length(dsCommon)
dsCommonROC <- dsCommon
dsToBeUsed <- intersect(dsCommon,dsCommonPA,dsCommonROC)
dsCommonROC <- dsCommon
dsToBeUsed <- intersect(dsCommon,dsCommonPA,dsCommonROC)
length(dsCommonROC)
dsToBeUsed <- intersect(dsCommonPA,dsCommonPR,dsCommonROC)
dsToBeUsed <- intersect(intersect(dsCommonPA,dsCommonPR),dsCommonROC)
length(dsToBeUsed)
write.csv(dsToBeUsed,paste(c(folder,"common.csv"),collapse=""))
write.csv(dsToBeUsed,paste(c(folder,"common.csv"),collapse=""))
folder
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
df_IBk <- df_IBk[which(df_IBk$Dataset %in% dsToBeUsed),]
df_JRip <- df_JRip[which(df_JRip$Dataset %in% dsToBeUsed),]
df_NaiveBayes <- df_NaiveBayes[which(df_NaiveBayes$Dataset %in% dsToBeUsed),]
df_Logistic <- df_Logistic[which(df_Logistic$Dataset %in% dsToBeUsed),]
df_all <- cbind(df_J48[,c(1:ncol(df_J48)-1)],df_J48$response,df_IBk$response,df_JRip$response,df_Logistic$response,df_NaiveBayes$response)
df_all <- df_all[,-grep("NoiseToSignalRatio",colnames(df_all))] #remove EQNA because is correlated (cor=1) with NtoSR
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
pca.ds <- PCA(scaled.df_all,quanti.sup = c(27:ncol(scaled.df_all)),axes = c(1,2),ncp = 13)
fviz_pca_var(pca.ds,axes = c(1,2), alpha.var="contrib") + theme_minimal() #visualize with factoextra
fviz_screeplot(pca.ds,ncp=20) #scree plot with factoextra
folder
algsResponseCol <- c("df_J48$response","df_IBk$response","df_JRip$response","df_Logistic$response","df_NaiveBayes$response")
alg <- algsResponseCol[1]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.1)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,]
pcor.response
pcor.matrix
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.1)
proba
correlation
p.value
source('~/pca_revisited.R', echo=TRUE)
length(dsToBeUsed)
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
dsToBeUsed <- read.csv(paste(c(folder,"common.csv"),collapse=""),header = TRUE,sep=",",colClasses = c("character","character"))[,2]
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
df_IBk <- df_IBk[which(df_IBk$Dataset %in% dsToBeUsed),]
df_JRip <- df_JRip[which(df_JRip$Dataset %in% dsToBeUsed),]
df_NaiveBayes <- df_NaiveBayes[which(df_NaiveBayes$Dataset %in% dsToBeUsed),]
df_Logistic <- df_Logistic[which(df_Logistic$Dataset %in% dsToBeUsed),]
df_all <- cbind(df_J48[,c(1:ncol(df_J48)-1)],df_J48$response,df_IBk$response,df_JRip$response,df_Logistic$response,df_NaiveBayes$response)
df_all <- df_all[,-grep("NoiseToSignalRatio",colnames(df_all))] #remove EQNA because is correlated (cor=1) with NtoSR
algsResponseCol <- c("df_J48$response","df_IBk$response","df_JRip$response","df_Logistic$response","df_NaiveBayes$response")
alg <- algsResponseCol[1]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.1)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,]
pcor.response <- as.data.frame(cbind(correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,]
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,]
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,]
cbind(colnames(ds)[proba],correlation,p.value,statistic)
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
algsResponseCol <- c("df_J48$response","df_IBk$response","df_JRip$response","df_Logistic$response","df_NaiveBayes$response")
alg <- algsResponseCol[1]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.1)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[2]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.1)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[3]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.1)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[4]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.1)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[5]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.1)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[1]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[2]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[3]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[4]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[5]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/precision/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
dsToBeUsed <- read.csv(paste(c(folder,"common.csv"),collapse=""),header = TRUE,sep=",",colClasses = c("character","character"))[,2]
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
dsToBeUsed <- read.csv(paste(c(folder,"common.csv"),collapse=""),header = TRUE,sep=",",colClasses = c("character","character"))[,2]
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/precision"
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
df_IBk <- df_IBk[which(df_IBk$Dataset %in% dsToBeUsed),]
df_JRip <- df_JRip[which(df_JRip$Dataset %in% dsToBeUsed),]
df_NaiveBayes <- df_NaiveBayes[which(df_NaiveBayes$Dataset %in% dsToBeUsed),]
df_Logistic <- df_Logistic[which(df_Logistic$Dataset %in% dsToBeUsed),]
df_all <- cbind(df_J48[,c(1:ncol(df_J48)-1)],df_J48$response,df_IBk$response,df_JRip$response,df_Logistic$response,df_NaiveBayes$response)
df_all <- df_all[,-grep("NoiseToSignalRatio",colnames(df_all))] #remove EQNA because is correlated (cor=1) with NtoSR
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
algsResponseCol <- c("df_J48$response","df_IBk$response","df_JRip$response","df_Logistic$response","df_NaiveBayes$response")
alg <- algsResponseCol[1]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg
alg <- algsResponseCol[2]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[3]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg
alg <- algsResponseCol[4]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[5]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/roc/"
df_J48 <- read.csv(paste(c(folder,"weka.J48_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_IBk <- read.csv(paste(c(folder,"weka.IBk_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_JRip <- read.csv(paste(c(folder,"weka.JRip_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_Logistic <- read.csv(paste(c(folder,"weka.Logistic_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
df_NaiveBayes <- read.csv(paste(c(folder,"weka.NaiveBayes_metadataset.csv"),collapse=""), header=TRUE, dec=".", sep=",",colClasses= c("character",rep("numeric",28)))
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/"
dsToBeUsed <- read.csv(paste(c(folder,"common.csv"),collapse=""),header = TRUE,sep=",",colClasses = c("character","character"))[,2]
folder <- "C:/Users/Besim/Dropbox/PhD/eclipse/workspaceDropbox/newWeka/results/roc/"
df_J48 <- df_J48[which(df_J48$Dataset %in% dsToBeUsed),]
df_IBk <- df_IBk[which(df_IBk$Dataset %in% dsToBeUsed),]
df_JRip <- df_JRip[which(df_JRip$Dataset %in% dsToBeUsed),]
df_NaiveBayes <- df_NaiveBayes[which(df_NaiveBayes$Dataset %in% dsToBeUsed),]
df_Logistic <- df_Logistic[which(df_Logistic$Dataset %in% dsToBeUsed),]
df_all <- cbind(df_J48[,c(1:ncol(df_J48)-1)],df_J48$response,df_IBk$response,df_JRip$response,df_Logistic$response,df_NaiveBayes$response)
df_all <- df_all[,-grep("NoiseToSignalRatio",colnames(df_all))] #remove EQNA because is correlated (cor=1) with NtoSR
scaled.df_all <- scale(df_all[,c(2:ncol(df_all))],center = TRUE,scale=TRUE)
algsResponseCol <- c("df_J48$response","df_IBk$response","df_JRip$response","df_Logistic$response","df_NaiveBayes$response")
alg <- algsResponseCol[5]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[1]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[2]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[3]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[4]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
alg <- algsResponseCol[5]
ds <- as.data.frame(scaled.df_all[,-setdiff(grep("response", colnames(scaled.df_all)), which(colnames(scaled.df_all)==alg))])
condes(as.data.frame(ds),num.var = which(colnames(ds)==alg),proba = 0.05)
pcor.matrix <- pcor(ds)
proba <- which(pcor.matrix$p.value[,grep("response",colnames(ds))]<=0.05)
correlation <- pcor.matrix$estimate[,grep("response",colnames(ds))][proba]
p.value <- pcor.matrix$p.value[,grep("response",colnames(ds))][proba]
statistic <- pcor.matrix$statistic[,grep("response",colnames(ds))][proba]
pcor.response <- as.data.frame(cbind(colnames(ds)[proba],correlation,p.value,statistic))
as.data.frame(pcor.response.ordered <- pcor.response[order(pcor.response[,2],decreasing=TRUE),])[-1,-1]
setwd("C:/Users/Besim/Dropbox/PhD/ourML/Change in Accuracy/Rgit/source")
source("utilityFunctions.R") #additional functions
source("feature-extraction.R") #functions for performing feauture extraction and selection : PCA + VARIMAX, PARTIAL CORRELATIONS
source("meta-learning-helper_classification.R")
algs <- c("weka.J48","weka.NaiveBayes","weka.JRip","weka.PART","weka.IBk","weka.Logistic")
trans <- c("All",transformations)
alg <- algs[1]
md.ds <- getDS(alg,readDelta=TRUE)
md.trans <- getTransformations(alg,readDelta=TRUE,"")
pca <- performPCA(md.trans,variance=90,old=FALSE,deltas=FALSE)
md.rot <- performVarimax(pca$md.pca,ncomp=pca$ncomp)
md.latent <- performFeatureExtraction(md.rot,md.ds,md.trans,measure ="pa",sign=0.05,withWeights=FALSE,union=FALSE)
new.md <-prepareMetaFeatures(md.latent$latent.ds,md.latent$latent.trans,md.ds,md.trans,"pa_delta")
md.ds <- new.md$md.ds
if(alg =="weka.IBk") t<-0 else t <- 0.0001
md.trans <- convertToClassification(new.md$md.trans,t) #if IBK it should be 0
md.trans <- convertToClassification(new.md$md.trans,t) #if IBK it should be 0
md.trans <- convertToClassification(new.md$md.trans,t) #if IBK it should be 0
if(alg =="weka.IBk") t<-0 else t <- 0.0001
md.trans <- convertToClassification(new.md$md.trans,t) #if IBK it should be 0
md.trans <- convertToClassification(new.md$md.trans,t) #if IBK it should be 0
t
md.trans <- convertToClassification(new.md$md.trans,t) #if IBK it should be 0
source('C:/Users/Besim/Dropbox/PhD/ourML/Change in Accuracy/Rgit/source/utilityFunctions.R')
md.trans <- convertToClassification(new.md$md.trans,t) #if IBK it should be 0
